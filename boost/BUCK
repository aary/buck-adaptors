def remove_first_two_path_elements(header_map):
    """
    Workaround to the first argument in subdir_glob not accepting a pattern.
    Does the dirty work that subdir_glob would have been able to do with
    patterns manually
    """
    map_to_return = {}
    for key, value in header_map.iteritems():
        # remove the path until hit the "include" folder and keep things after
        # that, for example, convert "something/else/include/folder/header.hpp" 
        # to "folder/header.hpp"
        array_of_path_with_include = key.strip("/").split('/')
        array_of_path_without_include = []
        location_include = -1
        for i in range(0, len(array_of_path_with_include)):
            # if found include then push everything after that to the path
            if array_of_path_with_include[i] == "include":
                location_include = i

        # make the new array with everything after the first include
        for i in range(location_include + 1, len(array_of_path_with_include)):
            array_of_path_without_include.append(\
                array_of_path_with_include[i])

        # then join it if it exists, apparently there were some cases where
        # things were blank
        if array_of_path_without_include:
            new_key = "/".join(array_of_path_without_include)
            map_to_return[new_key] = value
    return map_to_return

cxx_library(
    name = "boost",
    header_namespace = "",

    # No sources will be included because boost has deprecated most of the
    # source files that it had earlier.  It is almost exlusively a header only
    # module now.  yay.
    #
    # srcs = glob(["**/*.cpp"]),
    exported_headers = remove_first_two_path_elements(subdir_glob([
        ("boost/libs", "**/*.hpp"),
        ("boost/libs", "**/*.ipp"),
        ("boost/libs", "**/*.h"),
    ])),

    visibility = [
        "PUBLIC",
    ],
)
